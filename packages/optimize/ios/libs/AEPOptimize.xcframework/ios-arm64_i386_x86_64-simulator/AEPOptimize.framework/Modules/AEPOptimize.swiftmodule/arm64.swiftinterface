// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3.1 (swiftlang-1200.0.41 clang-1200.0.32.8)
// swift-module-flags: -target arm64-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AEPOptimize
import AEPCore
@_exported import AEPOptimize
import AEPServices
import Foundation
import Swift
@objc(AEPOffer) public class Offer : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc final public let etag: Swift.String
  @objc final public let schema: Swift.String
  @objc final public let type: AEPOptimize.OfferType
  @objc final public let language: [Swift.String]?
  @objc final public let content: Swift.String
  @objc final public let characteristics: [Swift.String : Swift.String]?
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  @objc override dynamic public init()
}
@objc extension Proposition {
  @objc dynamic public func generateReferenceXdm() -> [Swift.String : Any]
}
@objc extension Optimize {
  @objc(updatePropositions:withXdm:andData:) public static func updatePropositions(for decisionScopes: [AEPOptimize.DecisionScope], withXdm xdm: [Swift.String : Any]?, andData data: [Swift.String : Any]? = nil)
  @objc(getPropositions:completion:) public static func getPropositions(for decisionScopes: [AEPOptimize.DecisionScope], _ completion: @escaping ([AEPOptimize.DecisionScope : AEPOptimize.Proposition]?, Swift.Error?) -> Swift.Void)
  @objc(onPropositionsUpdate:) public static func onPropositionsUpdate(perform action: @escaping ([AEPOptimize.DecisionScope : AEPOptimize.Proposition]) -> Swift.Void)
  @objc(clearCachedPropositions) public static func clearCachedPropositions()
}
@objc(AEPProposition) public class Proposition : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let id: Swift.String
  @objc public var offers: [AEPOptimize.Offer] {
    @objc get
    @objc set
  }
  @objc final public let scope: Swift.String
  @objc public var scopeDetails: [Swift.String : Any]
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
  @objc deinit
  @objc override dynamic public init()
}
@objc(AEPDecisionScope) public class DecisionScope : ObjectiveC.NSObject, Swift.Codable {
  @objc final public let name: Swift.String
  @objc public init(name: Swift.String)
  @objc convenience public init(activityId: Swift.String, placementId: Swift.String, itemCount: Swift.UInt = 1)
  @objc override dynamic public func isEqual(_ object: Any?) -> Swift.Bool
  @objc override dynamic public var hash: Swift.Int {
    @objc get
  }
  @objc deinit
  @objc override dynamic public init()
  required public init(from decoder: Swift.Decoder) throws
  public func encode(to encoder: Swift.Encoder) throws
}
@objc(AEPOfferType) public enum OfferType : Swift.Int, Swift.Codable {
  case unknown = 0
  case json = 1
  case text = 2
  case html = 3
  case image = 4
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
@objc extension Offer {
  @objc dynamic public func generateDisplayInteractionXdm() -> [Swift.String : Any]?
  @objc dynamic public func generateTapInteractionXdm() -> [Swift.String : Any]?
  @objc dynamic public func displayed()
  @objc dynamic public func tapped()
}
@objc(AEPMobileOptimize) public class Optimize : ObjectiveC.NSObject, AEPCore.Extension {
  @objc final public let name: Swift.String
  @objc final public let friendlyName: Swift.String
  @objc public static let extensionVersion: Swift.String
  @objc final public let metadata: [Swift.String : Swift.String]?
  @objc final public let runtime: AEPCore.ExtensionRuntime
  @objc required public init?(runtime: AEPCore.ExtensionRuntime)
  @objc public func onRegistered()
  @objc public func onUnregistered()
  @objc public func readyForEvent(_ event: AEPCore.Event) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init()
}
extension AEPOptimize.OfferType : Swift.Equatable {}
extension AEPOptimize.OfferType : Swift.Hashable {}
extension AEPOptimize.OfferType : Swift.RawRepresentable {}
